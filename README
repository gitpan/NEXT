==============================================================================
                       Release of version 0.01 of NEXT
==============================================================================


NAME

    NEXT - Pseudo class for method redispatch


DESCRIPTION

    NEXT.pm adds a pseudoclass named C<NEXT> to any program that
    uses it. If a method C<m> calls C<$self->NEXT::m()>, the call to
    C<m> is redispatched as if the calling method had not originally
    been found.

    In other words, a call to C<$self->NEXT::m()> resumes the
    depth-first, left-to-right search of parent classes that
    resulted in the original call to C<m>.

    An particularly interesting use of redispatch is in
    C<AUTOLOAD>'ed methods. If such a method determines that it is
    not able to handle a particular call, it may choose to
    redispatch that call, in the hope that some other C<AUTOLOAD>
    (above it, or to its left) might do better.

    Note that it is a fatal error for any method (including C<AUTOLOAD>)
    to attempt to redispatch any method except itself. For example:

            sub D::oops { $_[0]->NEXT::other_method() }	# BANG!


AUTHOR

    Damian Conway (damian@conway.org)


COPYRIGHT

         Copyright (c) 2000, Damian Conway. All Rights Reserved.
         This module is free software. It may be used, redistributed
        and/or modified under the terms of the Perl Artistic License
             (see http://www.perl.com/perl/misc/Artistic.html)


==============================================================================

CHANGES IN VERSION 0.01

(No changes have been documented for this version)

==============================================================================

AVAILABILITY

NEXT has been uploaded to the CPAN
and is also available from:

	http://www.csse.monash.edu.au/~damian/CPAN/NEXT.tar.gz

==============================================================================
